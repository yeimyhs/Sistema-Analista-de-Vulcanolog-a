# Generated by Django 4.2.3 on 2023-08-18 20:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Eventtype',
            fields=[
                ('ideventtype', models.BigAutoField(db_column='idEventType', primary_key=True, serialize=False)),
                ('nameevent', models.CharField(db_column='nameEvent', max_length=126)),
                ('datecreationevent', models.DateTimeField(db_column='dateCreationEvent')),
                ('stateevent', models.BigIntegerField(db_column='stateEvent')),
            ],
            options={
                'db_table': 'EventType',
            },
        ),
        migrations.CreateModel(
            name='Imagesegmentation',
            fields=[
                ('idphoto', models.BigAutoField(db_column='idPhoto', primary_key=True, serialize=False)),
                ('urlimg', models.TextField(db_column='urlImg')),
                ('filenameimg', models.CharField(db_column='fileNameImg', max_length=128)),
                ('stateimg', models.SmallIntegerField(db_column='stateImg')),
                ('datecreationimg', models.SmallIntegerField(db_column='dateCreationImg')),
            ],
            options={
                'db_table': 'ImageSegmentation',
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('idstation', models.BigAutoField(db_column='idStation', primary_key=True, serialize=False)),
                ('standardnamestat', models.CharField(db_column='standardNameStat', max_length=64)),
                ('shortnamestat', models.CharField(db_column='shortNameStat', max_length=20)),
                ('longnamestat', models.CharField(db_column='longNameStat', max_length=126)),
                ('starttimestat', models.DateTimeField(db_column='startTimeStat')),
                ('latitudestat', models.FloatField(db_column='latitudeStat')),
                ('longitudestat', models.FloatField(db_column='longitudeStat')),
                ('altitudestat', models.FloatField(db_column='altitudeStat')),
                ('indstat', models.IntegerField(db_column='indStat')),
                ('statestat', models.IntegerField(db_column='stateStat')),
                ('datecreationstat', models.DateTimeField(db_column='dateCreationStat')),
                ('typestat', models.SmallIntegerField(blank=True, db_column='typeStat', null=True)),
            ],
            options={
                'db_table': 'Station',
            },
        ),
        migrations.CreateModel(
            name='UserP',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=512)),
                ('password', models.CharField(max_length=64)),
                ('firstname', models.CharField(max_length=128)),
                ('lastname', models.CharField(blank=True, max_length=128, null=True)),
                ('imagecover', models.BinaryField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=512, null=True)),
                ('phone', models.IntegerField(blank=True, null=True)),
                ('username', models.CharField(max_length=128)),
                ('adress', models.CharField(blank=True, max_length=512, null=True)),
                ('city', models.CharField(blank=True, max_length=512, null=True)),
                ('state', models.IntegerField(blank=True, null=True)),
                ('datecreation', models.DateTimeField()),
                ('type', models.IntegerField()),
                ('roll', models.IntegerField()),
            ],
            options={
                'db_table': 'User',
            },
        ),
        migrations.CreateModel(
            name='Volcano',
            fields=[
                ('idvolcano', models.BigAutoField(db_column='idVolcano', primary_key=True, serialize=False)),
                ('shortnamevol', models.CharField(db_column='shortNameVol', max_length=20)),
                ('longnamevol', models.CharField(db_column='longNameVol', max_length=126)),
                ('descriptionvol', models.TextField(db_column='descriptionVol')),
                ('latitudevol', models.FloatField(db_column='latitudeVol')),
                ('longitudevol', models.FloatField(db_column='longitudeVol')),
                ('altitudevol', models.FloatField(db_column='altitudeVol')),
                ('pwavespeedvol', models.FloatField(db_column='pWaveSpeedVol')),
                ('densityvol', models.FloatField(db_column='densityVol')),
                ('attcorrectfactorvol', models.FloatField(db_column='attCorrectFactorVol')),
                ('indvol', models.IntegerField(db_column='indVol')),
                ('statevol', models.SmallIntegerField(db_column='stateVol')),
                ('datecreationvol', models.DateTimeField(db_column='DateCreationVol')),
            ],
            options={
                'db_table': 'Volcano',
            },
        ),
        migrations.CreateModel(
            name='Temporaryseries',
            fields=[
                ('idtemporaryseries', models.BigAutoField(db_column='idTemporarySeries', primary_key=True, serialize=False)),
                ('meantempser', models.FloatField(db_column='meanTempSer')),
                ('variancetempser', models.FloatField(db_column='varianceTempSer')),
                ('standarddeviationtempser', models.FloatField(db_column='standardDeviationTempSer')),
                ('mediantempser', models.FloatField(db_column='medianTempSer')),
                ('maxvaluetempser', models.FloatField(db_column='maxValueTempSer')),
                ('rmsvaluetempser', models.FloatField(db_column='rmsValueTempSer')),
                ('energytempser', models.FloatField(db_column='energyTempSer')),
                ('maxenergyintervaltempser', models.FloatField(db_column='maxEnergyIntervalTempSer')),
                ('shannonentropytempser', models.FloatField(db_column='shannonEntropyTempSer')),
                ('durationtempser', models.FloatField(db_column='durationTempSer')),
                ('wavecontrasttempser', models.FloatField(db_column='waveContrastTempSer')),
                ('wavekurtosistempser', models.FloatField(db_column='waveKurtosisTempSer')),
                ('waveskewnesstempser', models.FloatField(db_column='waveSkewnessTempSer')),
                ('envelopecontrasttempser', models.FloatField(db_column='envelopeContrastTempSer')),
                ('envelopekurtosistempser', models.FloatField(db_column='envelopeKurtosisTempSer')),
                ('envelopeskewnesstempser', models.FloatField(db_column='envelopeSkewnessTempSer')),
                ('band01envelopeenergytempser', models.FloatField(db_column='band01EnvelopeEnergyTempSer')),
                ('band02envelopeenergytempser', models.FloatField(db_column='band02EnvelopeEnergyTempSer')),
                ('band03envelopeenergytempser', models.FloatField(db_column='band03EnvelopeEnergyTempSer')),
                ('band04envelopeenergytempser', models.FloatField(db_column='band04EnvelopeEnergyTempSer')),
                ('band05envelopeenergytempser', models.FloatField(db_column='band05EnvelopeEnergyTempSer')),
                ('band01envelopekurtosistempser', models.FloatField(db_column='band01EnvelopeKurtosisTempSer')),
                ('band02envelopekurtosistempser', models.FloatField(db_column='band02EnvelopeKurtosisTempSer')),
                ('band03envelopekurtosistempser', models.FloatField(db_column='band03EnvelopeKurtosisTempSer')),
                ('band04envelopekurtosistempser', models.FloatField(db_column='band04EnvelopeKurtosisTempSer')),
                ('band05envelopekurtosistempser', models.FloatField(db_column='band05EnvelopeKurtosisTempSer')),
                ('melc1tempser', models.FloatField(db_column='melC1TempSer')),
                ('melc2tempser', models.FloatField(db_column='melC2TempSer')),
                ('melc3tempser', models.FloatField(db_column='melC3TempSer')),
                ('melc4tempser', models.FloatField(db_column='melC4TempSer')),
                ('frequencyindextempser', models.FloatField(db_column='frequencyIndexTempSer')),
                ('frequencyratiotempser', models.FloatField(db_column='frequencyRatioTempSer')),
                ('minfrequencytempser', models.FloatField(db_column='minFrequencyTempSer')),
                ('powerspectrumkurtosistempser', models.FloatField(db_column='powerSpectrumKurtosisTempSer')),
                ('powerspectrumskewnesstempser', models.FloatField(db_column='powerSpectrumSkewnessTempSer')),
                ('starttimetempser', models.DateTimeField(db_column='startTimeTempSer')),
                ('datecreationtempser', models.DateTimeField(db_column='dateCreationTempSer')),
                ('statetempser', models.SmallIntegerField(db_column='stateTempSer')),
                ('ideventtype', models.ForeignKey(db_column='idEventType', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.eventtype')),
                ('idstation', models.ForeignKey(db_column='idStation', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.station')),
                ('idvolcano', models.ForeignKey(db_column='idVolcano', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.volcano')),
            ],
            options={
                'db_table': 'TemporarySeries',
            },
        ),
        migrations.CreateModel(
            name='Meteorologicaldata',
            fields=[
                ('starttimemet', models.DateTimeField(db_column='startTimeMet')),
                ('latitudemet', models.FloatField(db_column='latitudeMet')),
                ('longitudemet', models.FloatField(db_column='longitudeMet')),
                ('umet', models.FloatField(db_column='uMet')),
                ('vmet', models.FloatField(db_column='vMet')),
                ('speedmet', models.FloatField(db_column='speedMet')),
                ('directionmet', models.FloatField(db_column='directionMet')),
                ('temperaturemet', models.FloatField(db_column='temperatureMet')),
                ('geopotentialheightmet', models.FloatField(db_column='geopotentialHeightMet')),
                ('indmet', models.IntegerField(db_column='indMet')),
                ('jsonidmet', models.BigIntegerField(db_column='jsonIdMet')),
                ('statemet', models.SmallIntegerField(db_column='stateMet')),
                ('datecreationmet', models.DateTimeField(db_column='dateCreationMet')),
                ('idmetereorologicaldata', models.BigAutoField(db_column='idMetereorologicalData', primary_key=True, serialize=False)),
                ('idtemporaryseries', models.ForeignKey(blank=True, db_column='idTemporarySeries', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.temporaryseries')),
                ('idvolcano', models.ForeignKey(blank=True, db_column='idVolcano', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.volcano')),
            ],
            options={
                'db_table': 'MeteorologicalData',
            },
        ),
        migrations.CreateModel(
            name='Mask',
            fields=[
                ('idmask', models.BigAutoField(db_column='idMask', primary_key=True, serialize=False)),
                ('starttimetmask', models.DateTimeField(db_column='startTimetMask')),
                ('filenametmask', models.TextField(db_column='fileNametMask')),
                ('perimetertmask', models.FloatField(db_column='perimetertMask')),
                ('xcentroidtmask', models.FloatField(db_column='xCentroidtMask')),
                ('ycentroidtmask', models.FloatField(db_column='yCentroidtMask')),
                ('directiontmask', models.TextField(db_column='directiontMask')),
                ('areatmask', models.FloatField(db_column='areatMask')),
                ('heightmask', models.FloatField(db_column='heightMask')),
                ('idphoto', models.ForeignKey(db_column='idPhoto', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.imagesegmentation')),
                ('idstation', models.ForeignKey(db_column='idStation', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.station')),
                ('idvolcano', models.ForeignKey(db_column='idVolcano', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.volcano')),
            ],
            options={
                'db_table': 'Mask',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('idhistory', models.BigAutoField(db_column='idHistory', primary_key=True, serialize=False)),
                ('datemodificationhistory', models.DateTimeField(db_column='dateModificationHistory')),
                ('contentstringhistory', models.TextField(db_column='contentStringHistory')),
                ('statepermissionchangehistory', models.IntegerField(db_column='statePermissionChangeHistory')),
                ('datepermissionchangehistory', models.TimeField(db_column='datePermissionChangeHistory')),
                ('idtabletochangehistory', models.BigIntegerField(db_column='idTableToChangeHistory')),
                ('idregisterhistory', models.BigIntegerField(db_column='idRegisterHistory')),
                ('iduser', models.ForeignKey(db_column='idUser', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'History',
            },
        ),
        migrations.CreateModel(
            name='Blob',
            fields=[
                ('idblob', models.BigAutoField(db_column='idBlob', primary_key=True, serialize=False)),
                ('starttimeblob', models.DateTimeField(db_column='startTimeBlob')),
                ('filenameblob', models.TextField(db_column='fileNameBlob')),
                ('directionblob', models.BigIntegerField(db_column='directionBlob')),
                ('heightblob', models.IntegerField(db_column='heightBlob')),
                ('stateblob', models.SmallIntegerField(db_column='stateBlob')),
                ('datecreationblob', models.DateTimeField(db_column='dateCreationBlob')),
                ('idmask', models.ForeignKey(db_column='idMask', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.mask')),
            ],
            options={
                'db_table': 'Blob',
            },
        ),
        migrations.CreateModel(
            name='Alertconfiguration',
            fields=[
                ('idalertconf', models.BigAutoField(db_column='idAlertConf', primary_key=True, serialize=False)),
                ('altitudalertconf', models.FloatField(db_column='altitudAlertConf')),
                ('statealertconf', models.IntegerField(db_column='stateAlertConf')),
                ('datecreationalertconf', models.TimeField(db_column='dateCreationAlertConf')),
                ('notificationalertconf', models.BigIntegerField(blank=True, db_column='notificationAlertConf', null=True)),
                ('messagetemplateconfalert', models.BigIntegerField(blank=True, db_column='messageTemplateConfAlert', null=True)),
                ('mensajeriaalertconf', models.SmallIntegerField(blank=True, db_column='mensajeriaAlertConf', null=True)),
                ('idvolcano', models.ForeignKey(blank=True, db_column='idVolcano', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.volcano')),
            ],
            options={
                'db_table': 'AlertConfiguration',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('messagealert', models.TextField(db_column='messageAlert')),
                ('idalert', models.BigAutoField(db_column='idAlert', primary_key=True, serialize=False)),
                ('datecreationalert', models.TimeField(db_column='dateCreationAlert')),
                ('statealert', models.IntegerField(db_column='stateAlert')),
                ('startalert', models.SmallIntegerField(blank=True, db_column='startAlert', null=True)),
                ('idalertconf', models.ForeignKey(db_column='idAlertConf', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.alertconfiguration')),
                ('idvolcano', models.ForeignKey(db_column='idVolcano', on_delete=django.db.models.deletion.DO_NOTHING, to='volcanoApp.volcano')),
            ],
            options={
                'db_table': 'Alert',
            },
        ),
    ]
